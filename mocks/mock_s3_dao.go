// Code generated by MockGen. DO NOT EDIT.
// Source: threehook/aws-payload-offloading-go (interfaces: S3DaoI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockS3DaoI is a mock of S3DaoI interface.
type MockS3DaoI struct {
	ctrl     *gomock.Controller
	recorder *MockS3DaoIMockRecorder
}

// MockS3DaoIMockRecorder is the mock recorder for MockS3DaoI.
type MockS3DaoIMockRecorder struct {
	mock *MockS3DaoI
}

// NewMockS3DaoI creates a new mock instance.
func NewMockS3DaoI(ctrl *gomock.Controller) *MockS3DaoI {
	mock := &MockS3DaoI{ctrl: ctrl}
	mock.recorder = &MockS3DaoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3DaoI) EXPECT() *MockS3DaoIMockRecorder {
	return m.recorder
}

// DeletePayloadFromS3 mocks base method.
func (m *MockS3DaoI) DeletePayloadFromS3(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayloadFromS3", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePayloadFromS3 indicates an expected call of DeletePayloadFromS3.
func (mr *MockS3DaoIMockRecorder) DeletePayloadFromS3(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayloadFromS3", reflect.TypeOf((*MockS3DaoI)(nil).DeletePayloadFromS3), arg0, arg1)
}

// GetTextFromS3 mocks base method.
func (m *MockS3DaoI) GetTextFromS3(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextFromS3", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextFromS3 indicates an expected call of GetTextFromS3.
func (mr *MockS3DaoIMockRecorder) GetTextFromS3(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextFromS3", reflect.TypeOf((*MockS3DaoI)(nil).GetTextFromS3), arg0, arg1)
}

// StoreTextInS3 mocks base method.
func (m *MockS3DaoI) StoreTextInS3(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTextInS3", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTextInS3 indicates an expected call of StoreTextInS3.
func (mr *MockS3DaoIMockRecorder) StoreTextInS3(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTextInS3", reflect.TypeOf((*MockS3DaoI)(nil).StoreTextInS3), arg0, arg1, arg2)
}
