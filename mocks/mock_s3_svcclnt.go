// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/threehook/aws-payload-offloading-go/s3 (interfaces: S3SvcClientI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockS3SvcClientI is a mock of S3SvcClientI interface.
type MockS3SvcClientI struct {
	ctrl     *gomock.Controller
	recorder *MockS3SvcClientIMockRecorder
}

// MockS3SvcClientIMockRecorder is the mock recorder for MockS3SvcClientI.
type MockS3SvcClientIMockRecorder struct {
	mock *MockS3SvcClientI
}

// NewMockS3SvcClientI creates a new mock instance.
func NewMockS3SvcClientI(ctrl *gomock.Controller) *MockS3SvcClientI {
	mock := &MockS3SvcClientI{ctrl: ctrl}
	mock.recorder = &MockS3SvcClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3SvcClientI) EXPECT() *MockS3SvcClientIMockRecorder {
	return m.recorder
}

// DeleteObject mocks base method.
func (m *MockS3SvcClientI) DeleteObject(arg0 context.Context, arg1 *s3.DeleteObjectInput, arg2 ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObject", varargs...)
	ret0, _ := ret[0].(*s3.DeleteObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockS3SvcClientIMockRecorder) DeleteObject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockS3SvcClientI)(nil).DeleteObject), varargs...)
}

// GetObject mocks base method.
func (m *MockS3SvcClientI) GetObject(arg0 context.Context, arg1 *s3.GetObjectInput, arg2 ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockS3SvcClientIMockRecorder) GetObject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockS3SvcClientI)(nil).GetObject), varargs...)
}

// PutBucketEncryption mocks base method.
func (m *MockS3SvcClientI) PutBucketEncryption(arg0 context.Context, arg1 *s3.PutBucketEncryptionInput, arg2 ...func(*s3.Options)) (*s3.PutBucketEncryptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBucketEncryption", varargs...)
	ret0, _ := ret[0].(*s3.PutBucketEncryptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBucketEncryption indicates an expected call of PutBucketEncryption.
func (mr *MockS3SvcClientIMockRecorder) PutBucketEncryption(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBucketEncryption", reflect.TypeOf((*MockS3SvcClientI)(nil).PutBucketEncryption), varargs...)
}

// PutObject mocks base method.
func (m *MockS3SvcClientI) PutObject(arg0 context.Context, arg1 *s3.PutObjectInput, arg2 ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObject", varargs...)
	ret0, _ := ret[0].(*s3.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockS3SvcClientIMockRecorder) PutObject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockS3SvcClientI)(nil).PutObject), varargs...)
}
